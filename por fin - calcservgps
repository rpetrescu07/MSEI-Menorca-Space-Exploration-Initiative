#include <Adafruit_GPS.h> // Librería para el módulo GPS
#include <Servo.h>        // Librería para controlar servomotores

#define GPSSerial Serial

Adafruit_GPS GPS(&GPSSerial);

#define GPSECHO false

uint32_t timer = millis();

float rumbo;
double azimut;

Servo servo1;
Servo servo2;
float angle1;
float angle2;
float X;

// Coordenadas de destino predefinidas
const float latitud_destino = 39.88228411403223;  // Latitud del destino
const float longitud_destino = 4.292526162862364;   // Longitud del destino

void setup() {
  Serial.begin(115200);
  Serial.println("Adafruit GPS library basic parsing test!");

  GPS.begin(9600);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
  GPS.sendCommand(PGCMD_ANTENNA);
  delay(1000);
  GPSSerial.println(PMTK_Q_RELEASE);

  servo1.attach(8);
  servo1.write(angle1);

  servo2.attach(9);
  servo2.write(angle2);
}

void loop() {
  char c = GPS.read();
  if (GPSECHO && c)
    Serial.print(c);
  
  if (GPS.newNMEAreceived()) {
    if (!GPS.parse(GPS.lastNMEA()))
      return;
    
    Serial.println("Nuevos datos");

    // Print time
    Serial.print("\nTime: ");
    if (GPS.hour < 10) { Serial.print('0'); }
    Serial.print(GPS.hour, DEC); Serial.print(':');
    if (GPS.minute < 10) { Serial.print('0'); }
    Serial.print(GPS.minute, DEC); Serial.print(':');
    if (GPS.seconds < 10) { Serial.print('0'); }
    Serial.print(GPS.seconds, DEC); Serial.print('.');
    if (GPS.milliseconds < 10) {
      Serial.print("00");
    } else if (GPS.milliseconds > 9 && GPS.milliseconds < 100) {
      Serial.print("0");
    }
    Serial.println(" ");
    
    if (GPS.fix) {
      Serial.print("Latitud: "); Serial.println(GPS.latitudeDegrees);
      Serial.print("Longitud: "); Serial.println(GPS.longitudeDegrees);
      Serial.print("Angle: "); Serial.println(GPS.angle);

      float declatitud = (GPS.latitudeDegrees);
      float declongitud = (GPS.longitudeDegrees);

      float operacion1 = (float) declatitud * (PI / 180);
      float operacion2 = (float) declongitud * (PI / 180);
      float operacion3 = (float) latitud_destino * (PI / 180);
      float operacion4 = (float) longitud_destino * (PI / 180);
      
      float incremento_longitud = (float) operacion3 - operacion1;
      
      float x = (sin(incremento_longitud));
      float y = cos(operacion2) * tan(operacion4) - sin(operacion2) * cos(incremento_longitud);
      double azimut = atan2(y, x);
    
      rumbo = azimut * (180 / PI);
      
      Serial.print("El rumbo ideal sería: ");
      Serial.println(rumbo);

      ////////////////////////////////////////////////////////////////////// SERVOS
      X = GPS.angle - rumbo;

      Serial.print("X es: "); Serial.println(X);

      if (X >= 180) { //derecha
        Serial.println("Gira a la derecha");
        servo2.write(0);
        delay(1000);
        servo2.write(140);
        delay(1000);
        servo2.write(0);
      }
      if (X > 0 && X < 180) { //izquierda
        Serial.println("Gira a la izquierda");
        servo1.write(0);
        delay(1000);
        servo1.write(140);
        delay(1000);
        servo1.write(0);
      }
      if (X > -180 && X <= 0) { //derecha
        Serial.println("Gira a la derecha");
        servo2.write(0);
        delay(1000);
        servo2.write(140);
        delay(1000);
        servo2.write(0);
      }
      if (X <= -180) { //izquierda
        Serial.println("Gira a la izquierda");
        servo1.write(0);
        delay(1000);
        servo1.write(140);
        delay(1000);
        servo1.write(0);
      }
    }
  }
}
